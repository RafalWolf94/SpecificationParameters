TO DO:

Create filter class which inherits  SpecificationParams

for example: 
 public class ENTITYParameters : SpecificationParams 
    {
        public int? WarehouseID { get; set; }
          public int? LocationID { get; set; }
          public int? YearModel { get; set; }
          public decimal? LowestPrice { get; set; }
          public decimal? HighestPrice { get; set; }
          public string Sort { get; set; }
          public bool? IsLicensed { get; set; }
    }


Add Filter Class which inherits BaseSpecification<T> 

For Example


  public class ProductWithWarehouseAndLocationSpecification : BaseSpecification<Car>
    {
        public ProductWithWarehouseAndLocationSpecification(ProductSpecParams productParams) : base(x =>
            (string.IsNullOrWhiteSpace(productParams.Search) || x.Make.ToLower().Contains(productParams.Search))
            && (!productParams.WarehouseID.HasValue || x.WarehouseID == productParams.WarehouseID) 
            && (!productParams.LocationID.HasValue || x.LocationID == productParams.LocationID)
            && (!productParams.IsLicensed.HasValue || x.Licensed == productParams.IsLicensed)
            && (!productParams.YearModel.HasValue || x.Year_Model == productParams.YearModel)
            && (!productParams.HighestPrice.HasValue || x.Price <= productParams.HighestPrice)
            && (!productParams.LowestPrice.HasValue || x.Price >= productParams.LowestPrice)
        )
        {
            AddInclude(x => x.Warehouse);
            AddInclude(x => x.Location);
           
            ApplyPaging(productParams.PageSize * (productParams.PageIndex - 1), productParams.PageSize);

            if (string.IsNullOrEmpty(productParams.Sort)) return;
            switch (productParams.Sort)
            {
                case "priceAsc":
                    AddOrderBy(p => p.Price);
                    break;
                case "priceDesc":
                    AddOrderByDescending(p => p.Price);
                    break;
                default:
                    AddOrderByDescending(x => x.Date_Added);
                    break;
            }
        }

        public ProductWithWarehouseAndLocationSpecification(int id) : base(x => x.Id == id)
        {
            AddInclude(x => x.Warehouse);
            AddInclude(x => x.Location);
        }